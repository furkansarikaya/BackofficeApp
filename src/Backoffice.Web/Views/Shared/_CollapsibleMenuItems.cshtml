@model List<MenuViewModel>

@foreach (var menuItem in Model)
{
    @if (menuItem.HasChildren)
    {
        <div x-data="{ open: @(menuItem.IsExpanded.ToString().ToLower()) }">
            <!-- Collapsible Submenu Item -->
            <button @@click.stop="open = !open"
                    class="flex items-center justify-between w-full px-3 py-2 text-sm font-medium rounded-md hover:bg-gray-800 focus:outline-none"
                    x-bind:class="{ 
                        'text-white bg-gray-800': open || @(menuItem.IsCurrentPage.ToString().ToLower()),
                        'text-gray-300': !(open || @(menuItem.IsCurrentPage.ToString().ToLower()))
                    }">
                <!-- Icon -->
                @if (!string.IsNullOrEmpty(menuItem.Icon))
                {
                    <i class="@menuItem.Icon w-5 text-center"></i>
                }
                else
                {
                    <i class="far fa-dot-circle w-5 text-center"></i>
                }

                <!-- Label -->
                <span class="flex-1 ml-2">@menuItem.Name</span>

                <!-- Arrow -->
                <i class="fas fa-chevron-down text-xs transition-transform duration-200"
                   x-bind:class="{ 'transform rotate-180': open }"></i>
            </button>

            <!-- Nested Submenu -->
            <div x-show="open"
                 x-transition:enter="transition ease-out duration-200"
                 x-transition:enter-start="opacity-0 -translate-y-1"
                 x-transition:enter-end="opacity-100 translate-y-0"
                 x-transition:leave="transition ease-in duration-150"
                 x-transition:leave-start="opacity-100 translate-y-0"
                 x-transition:leave-end="opacity-0 -translate-y-1"
                 class="pl-4 mt-1 space-y-1 border-l border-gray-700">
                @await Html.PartialAsync("_TailwindMenuItems", menuItem.Children)
            </div>
        </div>
    }
    else
    {
        <!-- Regular Submenu Item -->
        <a href="@menuItem.GetUrl()"
           class="flex items-center px-3 py-2 text-sm font-medium rounded-md hover:bg-gray-800 focus:outline-none"
           x-bind:class="{ 
               'text-white bg-primary-700': @(menuItem.IsCurrentPage.ToString().ToLower()),
               'text-gray-300': !@(menuItem.IsCurrentPage.ToString().ToLower())
           }">
            <!-- Icon -->
            @if (!string.IsNullOrEmpty(menuItem.Icon))
            {
                <i class="@menuItem.Icon w-5 text-center"></i>
            }
            else
            {
                <i class="far fa-dot-circle w-5 text-center"></i>
            }

            <!-- Label -->
            <span class="ml-2">@menuItem.Name</span>
        </a>
    }
}